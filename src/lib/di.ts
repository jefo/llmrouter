// di.ts
import Bottle from "bottlejs";

export let container = new Bottle();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
export function resetContainer() {
  container = new Bottle();
}

// –ú–∞–ø–∞: Aggregate -> string token
const repositoryMap = new Map<Function, string>();

// üß† –ú–∞–ø–∏–º –∞–≥—Ä–µ–≥–∞—Ç –Ω–∞ –∏–º—è —Ç–æ–∫–µ–Ω–∞
function registerRepository(aggregate: Function, token: string) {
  repositoryMap.set(aggregate, token);
}

// üß© –£–¥–æ–±–Ω–∞—è DX-–æ–±—ë—Ä—Ç–∫–∞: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç + –µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
export function registerRepositories(
  bindings: [Function, new (...args: any[]) => any][]
) {
  for (const [aggregate, repoClass] of bindings) {
    const token = repoClass.name;
    container.service(token, repoClass);
    registerRepository(aggregate, token);
  }
}

// ü™ù –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ –∞–≥—Ä–µ–≥–∞—Ç—É
export function useRepository<T = any>(aggregate: Function): T {
  const token = repositoryMap.get(aggregate);
  if (!token)
    throw new Error(`Repository not found for aggregate: ${aggregate.name}`);
  return container.container[token] as T;
}
